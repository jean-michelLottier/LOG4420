var currentCharacter = null;

// make fight result function
// @param[in]   Int e: enemy damage
// @param[in]   Int l: lonewolf damage
function mfr(e, l) { return function (context) { context.characterDmg = l; context.monsterDmg = e; }; };
// make fight result function for automatic death of lonewolf
var mfrdl = function (context) { context.characterDmg = context.character.healthPoints; context.monsterDmg = 0; };
// make fight result function for automatic death of the enemy
var mfrde = function (context) { context.characterDmg = 0; context.monsterDmg = context.monster.healthPoints; };

// fight table for the game, do not attempt to read,
// relation between index and combat ratio :    if CR>=0      Math.Ceil(CR/2)+6      else     Math.Floor(CR/2)+6
// if CR < -11 then CR = -11    && if CR > 11 then CR = 11
var FightTable = [
[mfr(6, 0), mfrdl, mfrdl, mfr(0, 8), mfr(0, 8), mfr(1, 7), mfr(2, 6), mfr(3, 5), mfr(4, 4), mfr(5, 3), ],              // index 0, Combat Ratio -11 or less
[mfr(7, 0), mfrdl, mfr(0, 8), mfr(0, 7), mfr(1, 7), mfr(2, 6), mfr(3, 6), mfr(4, 5), mfr(5, 4), mfr(6, 3), ],          // index 1, Combat Ratio -10 & -9
[mfr(8, 0), mfr(0, 8), mfr(0, 7), mfr(1, 6), mfr(2, 6), mfr(3, 5), mfr(4, 5), mfr(5, 4), mfr(6, 3), mfr(7, 2), ],      // index 2, Combat Ratio -8 & -7
[mfr(9, 0), mfr(0, 6), mfr(1, 6), mfr(2, 5), mfr(3, 5), mfr(4, 4), mfr(5, 4), mfr(6, 3), mfr(7, 2), mfr(8, 0), ],      // index 3, Combat Ratio -6 & -5
[mfr(10, 0), mfr(1, 6), mfr(2, 5), mfr(3, 5), mfr(4, 4), mfr(5, 4), mfr(6, 3), mfr(7, 2), mfr(8, 1), mfr(9, 0), ],     // index 4, Combat Ratio -3 & -4
[mfr(11, 0), mfr(2, 5), mfr(3, 5), mfr(4, 4), mfr(5, 4), mfr(6, 3), mfr(7, 2), mfr(8, 2), mfr(9, 1), mfr(10, 0), ],    // index 5, Combat Ratio -1 & -2
[mfr(12, 0), mfr(3, 5), mfr(4, 4), mfr(5, 4), mfr(6, 3), mfr(7, 2), mfr(8, 2), mfr(9, 1), mfr(10, 0), mfr(11, 0), ],   // index 6, Combat Ratio 0
[mfr(14, 0), mfr(4, 5), mfr(5, 4), mfr(6, 3), mfr(7, 3), mfr(8, 2), mfr(9, 2), mfr(10, 1), mfr(11, 0), mfr(12, 0), ],  // index 7, Combat Ratio 1 & 2
[mfr(16, 0), mfr(5, 4), mfr(6, 3), mfr(7, 3), mfr(8, 2), mfr(9, 2), mfr(10, 2), mfr(11, 1), mfr(12, 0), mfr(14, 0), ], // index 8, Combat Ratio 3 & 4
[mfr(18, 0), mfr(6, 4), mfr(7, 3), mfr(8, 3), mfr(9, 2), mfr(10, 2), mfr(11, 1), mfr(12, 0), mfr(14, 0), mfr(16, 0), ],// index 9, Combat Ratio 5 & 6
[mfrde, mfr(7, 4), mfr(8, 3), mfr(9, 2), mfr(10, 2), mfr(11, 2), mfr(12, 1), mfr(14, 0), mfr(16, 0), mfr(18, 0), ],    // index 10, Combat Ratio 7 & 8
[mfrde, mfr(8, 3), mfr(9, 3), mfr(10, 2), mfr(11, 2), mfr(12, 2), mfr(14, 1), mfr(16, 0), mfr(18, 0), mfrde, ],        // index 11, Combat Ratio 9 & 10
[mfrde, mfr(9, 3), mfr(10, 2), mfr(11, 2), mfr(12, 2), mfr(14, 1), mfr(16, 1), mfr(18, 0), mfrde, mfrde, ],            // index 12, Combat Ratio 11 and more
];

function Monster(name, healthPoints, skillPoints) {
    this.name = name;
    this.healthPoints = healthPoints;
    this.skillPoints = skillPoints;
}

// Class Character
// Class to represent the character and it's properties
// @param[in]   String              name:           Name of the character
// @param[in]   Integer             skillsPoints:   Skills points of the character
// @param[in]   Integer             healthPoints:   Health points of the character
// @param[in]   Integer             goldPoints:     Gold points of the character  
// @param[in]   Array<Skill>        skills:         List of skills that the character has
// @param[in]   Array<Equipment>    equipment:      List of equipment that the character has
function Character(name, skillsPoints, healthPoints, gold, skills, equipment) {
    this.name = name;
    this.healthPoints = healthPoints;
    this.skillPoints = skillsPoints;
    this.gold = gold;
    this.skills = skills;
    this.equipment = equipment;
}

function initBackpack() {
    if ( $("#jeterObjets").size() ) {
        $("section#decision").css("display", "none");
        $("section#jeterObjets ~ p").css("display", "none");
        $("section#story p.situation ~ p").css("display", "none");

        $("section#jeterObjets button").click( function() {
                alert("test");
                var checkedObjets = $("section#jeterObjets input:checked");
                if (checkedObjets.length != 2) {
                        alert('Vous devez jeter EXACTEMENT deux objets de votre sac à dos');
                } else {
                    jQuery.each(checkedObjets, function() {
                        var checkedObjectName = this.name;
                        $('section#sac_a_dos li[name="' + checkedObjectName + '"]').remove();
                    });

                    $("section#decision").css("display", "block");
                    $("section#jeterObjets ~ p").css("display", "block");
                    $("section#jeterObjets button").css("display", "none");
                }
        });
    }
}

function updateDecisionUI() {

    var requiredSkills = $("section#decision p i span");
    var disciplines = #{toJSON $ disciplines person}

    requiredSkills = requiredSkills.filter(function(n) {
        return disciplines.indexOf($(requiredSkills[n]).text()) == -1
    });

    for (i = 0; i < requiredSkills.length; i++) {
        var skill = $(requiredSkills[i]).parent().parent().find("a").addClass("disabled");
    }
}

function confirmHealthLoss() {

    if ( $("#confirmLossPnt").size() ) {
        $("section#decision").css("display", "none");
        $("section#jeterObjets ~ p").css("display", "none");
        $("section#story p.situation ~ p").css("display", "none");

        $("button#confirmLossPnt").click (function() {
            var lifePoints = $("section#stats #pnt_endurance_restante");
            var lifeLoss = $("section#story p.situation #lifeLost").text();
            lifePoints.text(lifePoints.text() - lifeLoss);
            $(this).css("display", "none");
            $("section#story p.situation ~ p").css("display", "block");
            $("section#decision").css("display", "block");
        });
    }
}

$(document).ready( function() {

    $("nav #jeu").addClass("current");
    
    initBackpack();
	
    updateDecisionUI();

    confirmHealthLoss();

    // Action a exécuté lorsque l'utilisateur désire changer de page
    /*$("section#decision a").click( function() {
        var pageNumberId = $(this).attr("id");

        var characterHealth = $("section#stats #pnt_endurance_restante").text();
        var characterSkill = $("section#stats #nb_pnt_attaque").text();
        var characterGold = $("section#stats #nb_pieces_or").text();
        var characterDisciplines = $("section#stats #disciplines li");
        var characterItems = $("section#sac_a_dos li");

        var disciplinesArray = [];
        jQuery.each(characterDisciplines, function(index, value) {
        	disciplinesArray.push('"' + $(value).text() + '"');
        });

        var itemsArray = []
        jQuery.each(characterItems, function(index, value) {
        	itemsArray.push('"' + $(value).text() + '"');
        });

        //#{toJSON $ show $ pntEndurance person}

        $('form#invisibleForm input[name="characterLife"]').val(characterHealth);
        $('form#invisibleForm input[name="characterSkill"]').val(characterSkill);
        $('form#invisibleForm input[name="characterGold"]').val(characterGold);
        $('form#invisibleForm input[name="characterDisciplines"]').val("[" + disciplinesArray + "]");
        $('form#invisibleForm input[name="characterItems"]').val("[" + itemsArray + "]");

        $('form#invisibleForm input[name="currentPage"]').val(pageNumberId);

        $('#invisibleForm').submit();
    });*/

});

/*
Ajout Jean-Michel Lottier
*/
var nbrObjsASelectionner = 0;

var pnt_habilete_enemy = 0;
var pnt_endurance_enemy = 0;
var pnt_endurance_player = 0;
var pnt_habilete_player = 0;

var round = 0;
var table;
var battleRatio;

var sentence_round = "Ronde combat : ";
var sentence_ratio = "Ratio de combat : ";
var sentence_random_value = "Chiffre aléatoire : ";
var sentence_enemy_damage = "Ton enemi a eu ";
var sentence_enemy_endurance = " dégâts -<br/> et a maintenant ";
var sentence_enemy_endurance_bis = " points d'endurance.";
var sentence_player_damage = "Lone Wolf a eu ";
var sentence_player_endurance = " dégâts -<br/> et a maintenant ";
var sentence_player_endurance_bis = " points d'endurance.";

$(document).ready( function() {
    localStorage["endurance"] = #{rawJS $ show $ pntEndurance person};
    localStorage["habilete"] = #{rawJS $ show $ pntHabilete person};
    localStorage["piecesOr"] = #{rawJS $ show $ piecesOr person};
    localStorage["sacADos"] = #{rawJS $ show $ items person};

    $("#pnt_endurance_restante").text(localStorage.getItem("endurance"));
    $("#nb_pnt_attaque").text(localStorage.getItem("habilete"));
    $("#nb_pieces_or").text(localStorage.getItem("piecesOr"));
});

function loseLifePoint() {
    var value = $("#lifeLost").text();
    pnt_endurance_player = localStorage.getItem("endurance");
    localStorage["endurance"] = pnt_endurance_player - value;
    $('#pnt_endurance_restante').text(localStorage.getItem('endurance'));
    $("#confirmLossPnt").hide();
    $('#decision a').removeClass('disabled').addClass('enabled');
}

function completeFormWithObj(objs) {
    if (objs == null || objs.length == 0) {
        return;
    }
    objs = objs.split(',');
    for (var i = 0; i < objs.length; i++) {
        $('#jeterObjets fieldset').append('<input type=\"checkbox\" id=\"' + objs[i].replace(' ', '_') + '\" /><label for=\"' + objs[i].replace(' ', '_') + '\">' + objs[i] + '</label><br/>');
    }
}

function throwItems(){
    var checkedObjs = $("#jeterObjets input:checked").next();
    if (checkedObjs.length != nbrObjsASelectionner) {
        alert('Vous devez jeter uniquement ' + nbrObjsASelectionner + ' objet(s).');
        return false;
    }
    var objetsAJeter = new Array();
    var i = 0;
    checkedObjs.each(function() {
        objetsAJeter[i] = $(this).text();
        i++;
    });

    for ( i = 0; i < objetsAJeter.length; i++) {
        deleteObjFromLocalStorage(objetsAJeter[i]);
    }
    $('.throwObj').hide();
    $('#decision a').removeClass('disabled').addClass('enabled');
    return false;
}

function deleteObjFromLocalStorage(obj) {
    $("#jeterObjets input:checked").next().remove();
    $("#jeterObjets input:checked").remove();

    var result = localStorage.getItem("sacADos");
    result = result.split(',');
    var temp = new Array(), j = 0;
    for (var i = 0; i < result.length; i++) {
        if (result[i] != obj) {
            temp[j] = result[i];
            j++;
        } else if (result[i].match('[(x]+[0-9]+[)]') != null && parseInt(result[i].match('[0-9]+')) > 1) {
            var value = result[i].match('[0-9]+');
            var newValue = parseInt(value) - 1;
            result[i] = result[i].replace(value, newValue);
            temp[j] = result[i];
            j++;
            $('#sac_a_dos li:contains(\"' + obj + '\")').html('<li>' + result[i] + ' <span onclick="deleteObj($(this).parent())">&times;</span></li>');
        } else {
            $('#sac_a_dos li:contains(\"' + obj + '\")').remove();
            localStorage['nbreObj'] = (localStorage.getItem('nbreObj') - 1);
        }
    }
    localStorage.removeItem("sacADos");
    localStorage["sacADos"] = temp;
}

function initFightVariables(content){
    pnt_habilete_enemy = content.monsterSkill;
    pnt_endurance_enemy = content.monsterLife;
    pnt_endurance_player = localStorage.getItem("endurance");
    pnt_habilete_player = localStorage.getItem("habilete");

    table = createCombatTable(pnt_endurance_player, pnt_endurance_enemy);
    battleRatio = convertBattleRatio((pnt_habilete_player - pnt_habilete_enemy));

    var url = window.location.href;
    url = url.split('#');
    if (url.length >= 2 && url[1] == 'rounds') {//si un combat est en cours
        $("#combat").children().last().before(localStorage.getItem('rounds'));
        round = localStorage.getItem('roundVal');
        pnt_endurance_enemy = localStorage.getItem("pnt_endurance_enemy");
        if (round >= 2) {
            $("#fuir").show();
        }
    }

    localStorage['roundVal'] = round;
    localStorage['pnt_endurance_enemy'] = pnt_endurance_enemy;

    endBattle();
}

function fight() {
    round++;
    if (round == 2) {
        $("#fuir").show();
    }

    var randomValue = Math.floor((Math.random() * 9));
    var enemyDamage = table[randomValue][battleRatio][0];
    var playerDamage = table[randomValue][battleRatio][1];
    pnt_endurance_enemy -= enemyDamage;
    pnt_endurance_player -= playerDamage;

    if (pnt_endurance_enemy < 0) {
        pnt_endurance_enemy = 0;
    }
    if (pnt_endurance_player < 0) {
        pnt_endurance_player = 0;
    }
    localStorage['endurance'] = pnt_endurance_player;
    localStorage['pnt_endurance_enemy'] = pnt_endurance_enemy;
    localStorage['roundVal'] = round;

    var roundDescription = "<section>" + "<h3>" + sentence_round + round + "</h3>" + "<p>" + sentence_ratio + battleRatio + "<br/>" + sentence_random_value + randomValue + "</p>" + "<p>" + sentence_enemy_damage + enemyDamage + sentence_enemy_endurance + pnt_endurance_enemy + sentence_enemy_endurance_bis + "</p>" + "<p>" + sentence_player_damage + playerDamage + sentence_player_endurance + pnt_endurance_player + sentence_player_endurance_bis + "</p>" + "</section>";
        
    $('#pnt_endurance_restante').text(localStorage.getItem('endurance'));
    $("#combat").children().last().before(roundDescription);

    if (localStorage.hasOwnProperty('rounds')) {
        localStorage['rounds'] += roundDescription;
    } else {
        localStorage['rounds'] = roundDescription;
    }
    endBattle();
}

function endBattle() {
    var isEndBattle = false;
    if (pnt_endurance_player == 0) {
        window.location.replace(window.location.pathname + '#player_defeat');
        isEndBattle = true;
    } else if (pnt_endurance_enemy == 0) {
        $('#decision a').removeClass('disabled').addClass('enabled');
        alert("FIN du combat. Vous êtes victorieux!");
        isEndBattle = true;
    }

    if(isEndBattle) {
        $("#fuir").hide();
        $("#combattre").hide();
    }
}

function convertBattleRatio(battleRatio) {
    if (battleRatio <= -11) {
        return 0;
    } else if (battleRatio >= 11) {
        return 22;
    } else {
        return battleRatio + 11;
    }
}

function clearBattleStorage() {
    localStorage.removeItem('rounds');
    localStorage.removeItem('roundVal');
    localStorage.removeItem('pnt_endurance_enemy');
}

function createCombatTable(enduranceTotalJoueur, enduranceTotalMonstre) {
    var table = createArray(10, 23, 2);
    //[random value][combat ratio][0:enemy, 1:Lone Wolf]
    table[0][0][0] = 6;
    table[0][0][1] = 0;
    table[0][1][0] = 7;
    table[0][1][1] = 0;
    table[0][2][0] = 7;
    table[0][2][1] = 0;
    table[0][3][0] = 8;
    table[0][3][1] = 0;
    table[0][4][0] = 8;
    table[0][4][1] = 0;
    table[0][5][0] = 9;
    table[0][5][1] = 0;
    table[0][6][0] = 9;
    table[0][6][1] = 0;
    table[0][7][0] = 10;
    table[0][7][1] = 0;
    table[0][8][0] = 10;
    table[0][8][1] = 0;
    table[0][9][0] = 11;
    table[0][9][1] = 0;
    table[0][10][0] = 11;
    table[0][10][1] = 0;
    table[0][11][0] = 12;
    table[0][11][1] = 0;
    table[0][12][0] = 14;
    table[0][12][1] = 0;
    table[0][13][0] = 14;
    table[0][13][1] = 0;
    table[0][14][0] = 16;
    table[0][14][1] = 0;
    table[0][15][0] = 16;
    table[0][15][1] = 0;
    table[0][16][0] = 18;
    table[0][16][1] = 0;
    table[0][17][0] = 18;
    table[0][17][1] = 0;
    table[0][18][0] = enduranceTotalMonstre;
    table[0][18][1] = 0;
    table[0][19][0] = enduranceTotalMonstre;
    table[0][19][1] = 0;
    table[0][20][0] = enduranceTotalMonstre;
    table[0][20][1] = 0;
    table[0][21][0] = enduranceTotalMonstre;
    table[0][21][1] = 0;
    table[0][22][0] = enduranceTotalMonstre;
    table[0][22][1] = 0;

    table[1][0][0] = 0;
    table[1][0][1] = enduranceTotalJoueur;
    table[1][1][0] = 0;
    table[1][1][1] = enduranceTotalJoueur;
    table[1][2][0] = 0;
    table[1][2][1] = enduranceTotalJoueur;
    table[1][3][0] = 0;
    table[1][3][1] = 8;
    table[1][4][0] = 0;
    table[1][4][1] = 8;
    table[1][5][0] = 0;
    table[1][5][1] = 6;
    table[1][6][0] = 0;
    table[1][6][1] = 6;
    table[1][7][0] = 1;
    table[1][7][1] = 6;
    table[1][8][0] = 1;
    table[1][8][1] = 6;
    table[1][9][0] = 2;
    table[1][9][1] = 5;
    table[1][10][0] = 2;
    table[1][10][1] = 5;
    table[1][11][0] = 3;
    table[1][11][1] = 5;
    table[1][12][0] = 4;
    table[1][12][1] = 5;
    table[1][13][0] = 4;
    table[1][13][1] = 5;
    table[1][14][0] = 5;
    table[1][14][1] = 4;
    table[1][15][0] = 5;
    table[1][15][1] = 4;
    table[1][16][0] = 6;
    table[1][16][1] = 4;
    table[1][17][0] = 6;
    table[1][17][1] = 4;
    table[1][18][0] = 7;
    table[1][18][1] = 4;
    table[1][19][0] = 7;
    table[1][19][1] = 4;
    table[1][20][0] = 8;
    table[1][20][1] = 3;
    table[1][21][0] = 8;
    table[1][21][1] = 3;
    table[1][22][0] = 9;
    table[1][22][1] = 3;

    table[2][0][0] = 0;
    table[2][0][1] = enduranceTotalJoueur;
    table[2][1][0] = 0;
    table[2][1][1] = 8;
    table[2][2][0] = 0;
    table[2][2][1] = 8;
    table[2][3][0] = 0;
    table[2][3][1] = 7;
    table[2][4][0] = 0;
    table[2][4][1] = 7;
    table[2][5][0] = 1;
    table[2][5][1] = 6;
    table[2][6][0] = 1;
    table[2][6][1] = 6;
    table[2][7][0] = 2;
    table[2][7][1] = 5;
    table[2][8][0] = 2;
    table[2][8][1] = 5;
    table[2][9][0] = 3;
    table[2][9][1] = 5;
    table[2][10][0] = 3;
    table[2][10][1] = 5;
    table[2][11][0] = 4;
    table[2][11][1] = 4;
    table[2][12][0] = 5;
    table[2][12][1] = 4;
    table[2][13][0] = 5;
    table[2][13][1] = 4;
    table[2][14][0] = 6;
    table[2][14][1] = 3;
    table[2][15][0] = 6;
    table[2][15][1] = 3;
    table[2][16][0] = 7;
    table[2][16][1] = 3;
    table[2][17][0] = 7;
    table[2][17][1] = 3;
    table[2][18][0] = 8;
    table[2][18][1] = 3;
    table[2][19][0] = 8;
    table[2][19][1] = 3;
    table[2][20][0] = 9;
    table[2][20][1] = 3;
    table[2][21][0] = 9;
    table[2][21][1] = 3;
    table[2][22][0] = 10;
    table[2][22][1] = 2;

    table[3][0][0] = 0;
    table[3][0][1] = 8;
    table[3][1][0] = 0;
    table[3][1][1] = 7;
    table[3][2][0] = 0;
    table[3][2][1] = 7;
    table[3][3][0] = 1;
    table[3][3][1] = 6;
    table[3][4][0] = 1;
    table[3][4][1] = 6;
    table[3][5][0] = 2;
    table[3][5][1] = 5;
    table[3][6][0] = 2;
    table[3][6][1] = 5;
    table[3][7][0] = 3;
    table[3][7][1] = 5;
    table[3][8][0] = 3;
    table[3][8][1] = 5;
    table[3][9][0] = 4;
    table[3][9][1] = 4;
    table[3][10][0] = 4;
    table[3][10][1] = 4;
    table[3][11][0] = 5;
    table[3][11][1] = 4;
    table[3][12][0] = 6;
    table[3][12][1] = 3;
    table[3][13][0] = 6;
    table[3][13][1] = 3;
    table[3][14][0] = 7;
    table[3][14][1] = 3;
    table[3][15][0] = 7;
    table[3][15][1] = 3;
    table[3][16][0] = 8;
    table[3][16][1] = 3;
    table[3][17][0] = 8;
    table[3][17][1] = 3;
    table[3][18][0] = 9;
    table[3][18][1] = 2;
    table[3][19][0] = 9;
    table[3][19][1] = 2;
    table[3][20][0] = 10;
    table[3][20][1] = 2;
    table[3][21][0] = 10;
    table[3][21][1] = 2;
    table[3][22][0] = 11;
    table[3][22][1] = 2;

    table[4][0][0] = 0;
    table[4][0][1] = 8;
    table[4][1][0] = 1;
    table[4][1][1] = 7;
    table[4][2][0] = 1;
    table[4][2][1] = 7;
    table[4][3][0] = 2;
    table[4][3][1] = 6;
    table[4][4][0] = 2;
    table[4][4][1] = 6;
    table[4][5][0] = 3;
    table[4][5][1] = 5;
    table[4][6][0] = 3;
    table[4][6][1] = 5;
    table[4][7][0] = 4;
    table[4][7][1] = 4;
    table[4][8][0] = 4;
    table[4][8][1] = 4;
    table[4][9][0] = 5;
    table[4][9][1] = 4;
    table[4][10][0] = 5;
    table[4][10][1] = 4;
    table[4][11][0] = 6;
    table[4][11][1] = 3;
    table[4][12][0] = 7;
    table[4][12][1] = 3;
    table[4][13][0] = 7;
    table[4][13][1] = 3;
    table[4][14][0] = 8;
    table[4][14][1] = 2;
    table[4][15][0] = 8;
    table[4][15][1] = 2;
    table[4][16][0] = 9;
    table[4][16][1] = 2;
    table[4][17][0] = 9;
    table[4][17][1] = 2;
    table[4][18][0] = 10;
    table[4][18][1] = 2;
    table[4][19][0] = 10;
    table[4][19][1] = 2;
    table[4][20][0] = 11;
    table[4][20][1] = 2;
    table[4][21][0] = 11;
    table[4][21][1] = 2;
    table[4][22][0] = 12;
    table[4][22][1] = 2;

    table[5][0][0] = 1;
    table[5][0][1] = 7;
    table[5][1][0] = 2;
    table[5][1][1] = 6;
    table[5][2][0] = 2;
    table[5][2][1] = 6;
    table[5][3][0] = 3;
    table[5][3][1] = 5;
    table[5][4][0] = 3;
    table[5][4][1] = 5;
    table[5][5][0] = 4;
    table[5][5][1] = 4;
    table[5][6][0] = 4;
    table[5][6][1] = 4;
    table[5][7][0] = 5;
    table[5][7][1] = 4;
    table[5][8][0] = 5;
    table[5][8][1] = 4;
    table[5][9][0] = 6;
    table[5][9][1] = 3;
    table[5][10][0] = 6;
    table[5][10][1] = 3;
    table[5][11][0] = 7;
    table[5][11][1] = 2;
    table[5][12][0] = 8;
    table[5][12][1] = 2;
    table[5][13][0] = 8;
    table[5][13][1] = 2;
    table[5][14][0] = 9;
    table[5][14][1] = 2;
    table[5][15][0] = 9;
    table[5][15][1] = 2;
    table[5][16][0] = 10;
    table[5][16][1] = 2;
    table[5][17][0] = 10;
    table[5][17][1] = 2;
    table[5][18][0] = 11;
    table[5][18][1] = 2;
    table[5][19][0] = 11;
    table[5][19][1] = 2;
    table[5][20][0] = 12;
    table[5][20][1] = 2;
    table[5][21][0] = 12;
    table[5][21][1] = 2;
    table[5][22][0] = 14;
    table[5][22][1] = 1;

    table[6][0][0] = 2;
    table[6][0][1] = 6;
    table[6][1][0] = 3;
    table[6][1][1] = 6;
    table[6][2][0] = 3;
    table[6][2][1] = 6;
    table[6][3][0] = 4;
    table[6][3][1] = 5;
    table[6][4][0] = 4;
    table[6][4][1] = 5;
    table[6][5][0] = 5;
    table[6][5][1] = 4;
    table[6][6][0] = 5;
    table[6][6][1] = 4;
    table[6][7][0] = 6;
    table[6][7][1] = 3;
    table[6][8][0] = 6;
    table[6][8][1] = 3;
    table[6][9][0] = 7;
    table[6][9][1] = 2;
    table[6][10][0] = 7;
    table[6][10][1] = 2;
    table[6][11][0] = 8;
    table[6][11][1] = 2;
    table[6][12][0] = 9;
    table[6][12][1] = 2;
    table[6][13][0] = 9;
    table[6][13][1] = 2;
    table[6][14][0] = 10;
    table[6][14][1] = 2;
    table[6][15][0] = 10;
    table[6][15][1] = 2;
    table[6][16][0] = 11;
    table[6][16][1] = 1;
    table[6][17][0] = 11;
    table[6][17][1] = 1;
    table[6][18][0] = 12;
    table[6][18][1] = 1;
    table[6][19][0] = 12;
    table[6][19][1] = 1;
    table[6][20][0] = 14;
    table[6][20][1] = 1;
    table[6][21][0] = 14;
    table[6][21][1] = 1;
    table[6][22][0] = 16;
    table[6][22][1] = 1;

    table[7][0][0] = 3;
    table[7][0][1] = 5;
    table[7][1][0] = 4;
    table[7][1][1] = 5;
    table[7][2][0] = 4;
    table[7][2][1] = 5;
    table[7][3][0] = 5;
    table[7][3][1] = 4;
    table[7][4][0] = 5;
    table[7][4][1] = 4;
    table[7][5][0] = 6;
    table[7][5][1] = 3;
    table[7][6][0] = 6;
    table[7][6][1] = 3;
    table[7][7][0] = 7;
    table[7][7][1] = 2;
    table[7][8][0] = 7;
    table[7][8][1] = 2;
    table[7][9][0] = 8;
    table[7][9][1] = 2;
    table[7][10][0] = 8;
    table[7][10][1] = 2;
    table[7][11][0] = 9;
    table[7][11][1] = 1;
    table[7][12][0] = 10;
    table[7][12][1] = 1;
    table[7][13][0] = 10;
    table[7][13][1] = 1;
    table[7][14][0] = 11;
    table[7][14][1] = 1;
    table[7][15][0] = 11;
    table[7][15][1] = 1;
    table[7][16][0] = 12;
    table[7][16][1] = 0;
    table[7][17][0] = 12;
    table[7][17][1] = 0;
    table[7][18][0] = 14;
    table[7][18][1] = 0;
    table[7][19][0] = 14;
    table[7][19][1] = 0;
    table[7][20][0] = 16;
    table[7][20][1] = 0;
    table[7][21][0] = 16;
    table[7][21][1] = 0;
    table[7][22][0] = 18;
    table[7][22][1] = 0;

    table[8][0][0] = 4;
    table[8][0][1] = 4;
    table[8][1][0] = 5;
    table[8][1][1] = 4;
    table[8][2][0] = 5;
    table[8][2][1] = 4;
    table[8][3][0] = 6;
    table[8][3][1] = 3;
    table[8][4][0] = 6;
    table[8][4][1] = 3;
    table[8][5][0] = 7;
    table[8][5][1] = 2;
    table[8][6][0] = 7;
    table[8][6][1] = 2;
    table[8][7][0] = 8;
    table[8][7][1] = 1;
    table[8][8][0] = 8;
    table[8][8][1] = 1;
    table[8][9][0] = 9;
    table[8][9][1] = 1;
    table[8][10][0] = 9;
    table[8][10][1] = 1;
    table[8][11][0] = 10;
    table[8][11][1] = 0;
    table[8][12][0] = 11;
    table[8][12][1] = 0;
    table[8][13][0] = 11;
    table[8][13][1] = 0;
    table[8][14][0] = 12;
    table[8][14][1] = 0;
    table[8][15][0] = 12;
    table[8][15][1] = 0;
    table[8][16][0] = 14;
    table[8][16][1] = 0;
    table[8][17][0] = 14;
    table[8][17][1] = 0;
    table[8][18][0] = 16;
    table[8][18][1] = 0;
    table[8][19][0] = 16;
    table[8][19][1] = 0;
    table[8][20][0] = 18;
    table[8][20][1] = 0;
    table[8][21][0] = 18;
    table[8][21][1] = 0;
    table[8][22][0] = enduranceTotalMonstre;
    table[8][22][1] = 0;

    table[9][0][0] = 5;
    table[9][0][1] = 3;
    table[9][1][0] = 6;
    table[9][1][1] = 3;
    table[9][2][0] = 6;
    table[9][2][1] = 3;
    table[9][3][0] = 7;
    table[9][3][1] = 2;
    table[9][4][0] = 7;
    table[9][4][1] = 2;
    table[9][5][0] = 8;
    table[9][5][1] = 0;
    table[9][6][0] = 8;
    table[9][6][1] = 0;
    table[9][7][0] = 9;
    table[9][7][1] = 0;
    table[9][8][0] = 9;
    table[9][8][1] = 0;
    table[9][9][0] = 10;
    table[9][9][1] = 0;
    table[9][10][0] = 10;
    table[9][10][1] = 0;
    table[9][11][0] = 11;
    table[9][11][1] = 0;
    table[9][12][0] = 12;
    table[9][12][1] = 0;
    table[9][13][0] = 12;
    table[9][13][1] = 0;
    table[9][14][0] = 14;
    table[9][14][1] = 0;
    table[9][15][0] = 14;
    table[9][15][1] = 0;
    table[9][16][0] = 16;
    table[9][16][1] = 0;
    table[9][17][0] = 16;
    table[9][17][1] = 0;
    table[9][18][0] = 18;
    table[9][18][1] = 0;
    table[9][19][0] = 18;
    table[9][19][1] = 0;
    table[9][20][0] = enduranceTotalMonstre;
    table[9][20][1] = 0;
    table[9][21][0] = enduranceTotalMonstre;
    table[9][21][1] = 0;
    table[9][22][0] = enduranceTotalMonstre;
    table[9][22][1] = 0;

    return table;
}

function createArray(length) {
    var arr = new Array(length || 0), i = length;

    if (arguments.length > 1) {
        var args = Array.prototype.slice.call(arguments, 1);
        while (i--)
        arr[length - 1 - i] = createArray.apply(this, args);
    }

    return arr;
}